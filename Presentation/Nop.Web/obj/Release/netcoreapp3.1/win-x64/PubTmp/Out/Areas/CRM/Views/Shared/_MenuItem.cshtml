@model SiteMapNode
@using Nop.Core.Domain.Localization
@using Nop.Web.Framework.Menu
@inject IWorkContext workContext
@inject LocalizationSettings localizationSettings
@{
    string url = null;
    if (!string.IsNullOrEmpty(Model.ControllerName) && !string.IsNullOrEmpty(Model.ActionName))
    {
        url = Url.Action(Model.ActionName, Model.ControllerName, Model.RouteValues, null, null);
    }
    else if (!string.IsNullOrEmpty(Model.Url))
    {
        url = Model.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(Model.Url) : Model.Url;
    }
    var isActive = Model.ContainsSystemName(Html.GetActiveMenuItemSystemName());
}
@if (!string.IsNullOrEmpty(url))
{
    <li class="menu-item  @(isActive ? "menu-item-active" : null)" aria-haspopup="true">
        <a href="@url" class="menu-link">
            @if (!string.IsNullOrEmpty(Model.IconClass))
            {
                <text>
                            <span class="menu-icon">
                                <i class="@Url.Content(Model.IconClass)"><span></span></i>
                            </span>
                    
                </text>
            }
            <span class="menu-text">@Model.Title</span>
            @if (!string.IsNullOrEmpty(Model.BadgeId))
            {
                <text>
                    <span class="badge @Model.BadgeCss @Model.BadgeId tb-menu-badge"></span>
                </text>
            }
        </a>
    </li>

}
else
{
    var childNodes = Model.ChildNodes.Where(x => x.Visible).ToList();
    var hasChildNodes = childNodes.Any();
    var liCssClass = "";
    if (hasChildNodes)
    {
        liCssClass = "menu-item-rel";
    }
    if (isActive)
    {
        if (!String.IsNullOrEmpty(liCssClass))
        {
            liCssClass += " ";
        }
        liCssClass += "menu-item-open menu-item-here";
    }
    <li class="menu-item menu-item-submenu @(liCssClass)" data-menu-toggle="hover" aria-haspopup="true">
        <a href="javascript:;" class="menu-link menu-toggle">

            @if (!string.IsNullOrEmpty(Model.IconClass))
            {
                <text>
                    <i class="@Url.Content(Model.IconClass)"></i>
                </text>
            }
            <span class="menu-text">@Model.Title</span>
            <span class="menu-desc">@Model.TitleDesc</span>
            <i class="menu-arrow"></i>
           
        </a>
        @if (hasChildNodes)
        {            
            <div class="menu-submenu menu-submenu-classic menu-submenu-left">
                <ul class="menu-subnav">
                    @foreach (var childItem in childNodes)
                    {
                        @await Html.PartialAsync("_MenuItem", childItem)
                    }
                </ul>
            </div>
        }
    </li>
}